(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{647:function(t,s,a){"use strict";a.r(s);var e=a(21),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支"}},[t._v("#")]),t._v(" Git 分支")]),t._v(" "),a("p",[t._v("分支相当于当前工作目录的副本，使用分支，可以让我们从主线中分离出来，不同的分支可以做不同的事情，有的分支修复 bug，有的分支开发新功能，避免影响开发主线。")]),t._v(" "),a("h2",{attrs:{id:"分支的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支的分类"}},[t._v("#")]),t._v(" 分支的分类")]),t._v(" "),a("ul",[a("li",[t._v("主分支(master)：第一次向 git 仓库中提交更新记录时自动产生的分支。")]),t._v(" "),a("li",[t._v("开发分支(develop)：作为开发的分支，基于 master 分支创建，在实际开发中，一定要保持主分支的稳定性，开发完成后，再合并到主分支，每个分支相互独立，互不影响。")]),t._v(" "),a("li",[t._v("功能分支(feature)：作为开发具体功能的分支，基于开发分支创建。功能分支开发完成后，再合并到开发分支，开分分支功能累计后再合并到主分支。")])]),t._v(" "),a("p",[t._v("分支可以存储各个项目版本")]),t._v(" "),a("h2",{attrs:{id:"分支命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支命令"}},[t._v("#")]),t._v(" 分支命令")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git branch")]),t._v(" 查看分支")]),t._v(" "),a("li",[a("code",[t._v("git branch 分支名称")]),t._v(" 创建分支")]),t._v(" "),a("li",[a("code",[t._v("git checkout -b 分支名称")]),t._v(" 创建并切换分支")]),t._v(" "),a("li",[a("strong",[t._v("在切换分支之前，当前分支上的工作一定要提交到 git 仓库中，要保证当前分支上的工作区是完全干净的状态。")])]),t._v(" "),a("li",[a("code",[t._v("git checkout 分支名称")]),t._v(" 切换到指定分支")]),t._v(" "),a("li",[a("code",[t._v("git push -u origin 分支名称")])]),t._v(" "),a("li",[a("code",[t._v("git merge 需要合并的分支")]),t._v(" 合并分支，合并分支前要先切换到主分支")]),t._v(" "),a("li",[a("code",[t._v("git branch -d 分支名称")]),t._v("删除分支，删除分支前要切换到其他分支下，分支被合并后才运行删除，"),a("code",[t._v("-D")]),t._v("可以强制删除")]),t._v(" "),a("li",[t._v("经过实验证明，主分支也能够被删除，小心。")]),t._v(" "),a("li",[a("code",[t._v("git push origin --delete 分支名称")]),t._v(" 删除远程分支")])]),t._v(" "),a("h2",{attrs:{id:"暂时保持更改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂时保持更改"}},[t._v("#")]),t._v(" 暂时保持更改")]),t._v(" "),a("p",[t._v("在 git 中，分支要先提交到仓库再切换，但有时不想提交又要切换分支，可以暂时提取分支上的所有改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git stash")]),t._v(" 存储临时改动，提取所有的改动并保存至剪切板内")]),t._v(" "),a("li",[a("code",[t._v("git restore --staged 文件")]),t._v(" 这条命令还可以将临时存储的文件撤销")]),t._v(" "),a("li",[a("code",[t._v("git stash pop")]),t._v("恢复分支")])]),t._v(" "),a("p",[t._v("git 提供的存储功能是独立于分支的，其他分支也可以使用这个命令，注意不要弄错分支")]),t._v(" "),a("h2",{attrs:{id:"git-分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支操作"}},[t._v("#")]),t._v(" git 分支操作")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git fetch 将远程主机的最新内容拉到本地")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git branch -a 查看所有分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保证当前分支最新再切换分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git add .")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git commit -m 描述")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git checkout dev-1.1.0 切换分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git merge dev-1.0.0 合并分支")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"使用-vscode-命令行工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-vscode-命令行工具"}},[t._v("#")]),t._v(" 使用 vscode 命令行工具")])])}),[],!1,null,null,null);s.default=v.exports}}]);