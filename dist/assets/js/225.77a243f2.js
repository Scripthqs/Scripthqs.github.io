(window.webpackJsonp=window.webpackJsonp||[]).push([[225],{694:function(t,a,v){"use strict";v.r(a);var _=v(50),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"内置对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内置对象"}},[t._v("#")]),t._v(" 内置对象")]),t._v(" "),v("p",[t._v("内置对象是由ES标准中定义的对象，在任何的ES实现中都可以使用。")]),t._v(" "),v("p",[t._v("比如：Object、Math、Date、String、Array、Number、Boolean、Function，RegExp等。")]),t._v(" "),v("h2",{attrs:{id:"_1、date对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、date对象"}},[t._v("#")]),t._v(" 1、Date对象")]),t._v(" "),v("p",[t._v("在JS中使用Date对象来表示时间")]),t._v(" "),v("ul",[v("li",[t._v("创建Date对象\n"),v("ul",[v("li",[v("code",[t._v("var date = new Date();")])]),t._v(" "),v("li",[t._v("直接使用构造函数创建的Data对象，则会封装当前代码执行的时间")]),t._v(" "),v("li",[t._v("可以将一个时间作为参数传递给构造函数")]),t._v(" "),v("li",[v("code",[t._v("var date = new Date('12/30/2020 12:13:58')")])])])]),t._v(" "),v("li",[t._v("date.getDate();\n"),v("ul",[v("li",[t._v("获取当前日期是几日")])])]),t._v(" "),v("li",[t._v("date.getDay();\n"),v("ul",[v("li",[t._v("获取当前日期是周几，0-6，0代表周日")])])]),t._v(" "),v("li",[t._v("date.getMonth();\n"),v("ul",[v("li",[t._v("获取月份，0-11，0表示1月，11表示12月")])])]),t._v(" "),v("li",[t._v("getTime();\n"),v("ul",[v("li",[t._v("获取当前日期对象的时间戳")]),t._v(" "),v("li",[t._v("从1970年1月1日，0时0分0秒到当前时间花费的毫秒数，1秒=1000毫秒")]),t._v(" "),v("li",[t._v("计算机底层就是使用时间戳")]),t._v(" "),v("li",[v("code",[t._v("Date.now()")]),t._v("获取当前时间的时间戳，可以测试代码执行的性能")])])])]),t._v(" "),v("h2",{attrs:{id:"_2、math对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、math对象"}},[t._v("#")]),t._v(" 2、Math对象")]),t._v(" "),v("ul",[v("li",[t._v("Math和其他对象不同，不是一个构造函数")]),t._v(" "),v("li",[t._v("它属于工具类，不用创建对象，里面封装了数学运算相关的属性和方法")]),t._v(" "),v("li",[v("code",[t._v("Math.abs()")]),t._v("绝对值")]),t._v(" "),v("li",[v("code",[t._v("Math.ceil()")]),t._v("上舍入，进行向上取整")]),t._v(" "),v("li",[v("code",[t._v("Math.floor()")]),t._v("向下取整")]),t._v(" "),v("li",[v("code",[t._v("Math.round()")]),t._v("四舍五入")]),t._v(" "),v("li",[v("code",[t._v("Math.random()")]),t._v("可以生成随机0-1的随机数")]),t._v(" "),v("li",[t._v("生成x-y随机数："),v("code",[t._v("Math.round(Math.random()*(y-x)+x)")])]),t._v(" "),v("li",[v("code",[t._v("Math.max()")]),t._v("获取最大值")]),t._v(" "),v("li",[v("code",[t._v("Math.min()")]),t._v("获取最小值")]),t._v(" "),v("li",[v("code",[t._v("Math.pow(x,y)")]),t._v("x的y次幂")]),t._v(" "),v("li",[v("code",[t._v("Math.sqrt(x)")]),t._v("对一个数开方")])]),t._v(" "),v("h2",{attrs:{id:"_3、regexp对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、regexp对象"}},[t._v("#")]),t._v(" 3、RegExp对象")]),t._v(" "),v("p",[t._v("RegExp即正则表达式")]),t._v(" "),v("ul",[v("li",[t._v("正则表达式用于定义一些字符串的规则。")]),t._v(" "),v("li",[t._v("计算机可以根据正则表达式，来检查一个字符串是否符合指定的规则，或者将字符串中符合规则的内容提取出来。")])]),t._v(" "),v("h3",{attrs:{id:"_3-1、创建正则表达式对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、创建正则表达式对象"}},[t._v("#")]),t._v(" 3.1、创建正则表达式对象")]),t._v(" "),v("ol",[v("li",[t._v("使用构造函数创建正则表达式的对象")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v('var 变量 = new RegExp("正则表达式","匹配模式") //两个参数都是字符串')])]),t._v(" "),v("li",[v("code",[t._v("test()")]),t._v("这个方法可以检查一个字符串是否符合正则表达式的规则")]),t._v(" "),v("li",[v("code",[t._v("reg.test(str)")]),t._v("如果符合则返回true，否则返回false")]),t._v(" "),v("li",[t._v("构造函数第二个参数，两个参数都是字符串\n"),v("ul",[v("li",[t._v("i 忽略大小写，ignore")]),t._v(" "),v("li",[t._v("g 全局匹配模式，global")])])])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("使用字面量创建正则表达式")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var 变量 = /正则表达式/匹配模式; // 注意，这个语法里没有引号")])])]),t._v(" "),v("p",[t._v("两种方法的比较：")]),t._v(" "),v("ul",[v("li",[t._v("构造函数创建时，更加灵活，因为参数中可以传递变量")]),t._v(" "),v("li",[t._v("使用字面量创建更加简单")])]),t._v(" "),v("p",[t._v("全局匹配g慎用test()方法:")]),t._v(" "),v("ul",[v("li",[t._v("对于全局的正则表达式，test()只会检测是否存在某个目标字符串，只要存在就为true")])]),t._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[t._v("        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reg "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token regex"}},[v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("test")]),v("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),v("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_test_test'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n        console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br")])]),v("ul",[v("li",[v("p",[t._v("全局匹配模式g一般用 exec()、match()、replace()等方法。")])]),t._v(" "),v("li",[v("p",[t._v("全局匹配模式g如果用于test()方法会有问题。因为g模式会生成一个lastindex参数来存储匹配最后一次的位置。")])]),t._v(" "),v("li",[v("p",[t._v("创建一个表达式，检查字符串是否有a或b，使用"),v("code",[t._v("|")]),t._v("或者"),v("code",[t._v("[]")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var reg = /a|b/")])]),t._v(" "),v("li",[v("code",[t._v("var reg = /[ab]/")])]),t._v(" "),v("li",[v("code",[t._v("var reg = /[a-z]/")]),t._v("任意小写")]),t._v(" "),v("li",[v("code",[t._v("var reg = /[A-Z]/")]),t._v("任意大写")]),t._v(" "),v("li",[v("code",[t._v("var reg = /[A-z]/")]),t._v("任意字母")]),t._v(" "),v("li",[v("code",[t._v("var reg = /a[bde]c/")])])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("^")]),t._v("表示除了")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var reg = /[^ab]/")]),t._v("除了a或b之外，还有没有其他的字符内容")]),t._v(" "),v("li",[v("code",[t._v("var reg = /[^0-9]/")]),t._v("除了数字，还有没有其他的字符内容")])])])]),t._v(" "),v("h3",{attrs:{id:"_3-2、字符串和正则表达式的方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、字符串和正则表达式的方法"}},[t._v("#")]),t._v(" 3.2、字符串和正则表达式的方法")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("split()")]),t._v("可以将一个字符串拆分成一个数组\n"),v("ul",[v("li",[t._v("该方法可以根据任意字母将字符串拆分")]),t._v(" "),v("li",[t._v("可以传递正则表达式作为参数，这样方法可以根据正则表达式区拆分字符串")]),t._v(" "),v("li",[v("code",[t._v("str.split(/[a-z]/)")])])])]),t._v(" "),v("li",[v("code",[t._v("search()")]),t._v("可以搜索字符串是否含有指定内容\n"),v("ul",[v("li",[t._v("如果搜索到指定内容，则会返回第一次出现的出现的索引，没有则返回-1")]),t._v(" "),v("li",[t._v("可以传递正则表达式作为参数")]),t._v(" "),v("li",[v("code",[t._v("str.search(/a[bcd]e/)")])])])]),t._v(" "),v("li",[v("code",[t._v("match()")]),t._v("可以根据正则表达式，从一个字符串中符合条件的内容提取出来\n"),v("ul",[v("li",[v("code",[t._v("str.match(/[A-z]/)")]),t._v("默认情况下，match只会只找到第一个")]),t._v(" "),v("li",[t._v("我们可以设置正则表达式为全局匹配")]),t._v(" "),v("li",[v("code",[t._v("str.match(/[A-z]/g)")]),t._v("也可以设置同时设置ig")]),t._v(" "),v("li",[t._v("match()方法会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果")]),t._v(" "),v("li",[t._v("match()这个方法还是很实用的，可以在一个很长的字符串中，提取出有规则的内容。爬虫的时候经常会使用")])])]),t._v(" "),v("li",[v("code",[t._v("replace()")]),t._v("可以将字符串中的指定内容替换成新的内容\n"),v("ul",[v("li",[v("code",[t._v("str.replace('a','@')")]),t._v("2个参数，被替换的内容和新的内容，默认只会替换第一个")]),t._v(" "),v("li",[v("code",[t._v("str.replace(/[a-z]/ig,'@')")])]),t._v(" "),v("li",[v("code",[t._v("str.replace(/[a-z]/ig,'')")]),t._v("可以去除字母")])])])]),t._v(" "),v("h3",{attrs:{id:"_3-3、正则表达式语法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、正则表达式语法"}},[t._v("#")]),t._v(" 3.3、正则表达式语法")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("创建正则表达式检查字符串是否含有aaa")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var reg = /a{3}/")])]),t._v(" "),v("li",[v("code",[t._v("{n}")]),t._v("表示正好出现n次")]),t._v(" "),v("li",[v("code",[t._v("{m,n}")]),t._v("表示出现m次到n次")]),t._v(" "),v("li",[v("code",[t._v("{m,}")]),t._v("表示出现m次以上")]),t._v(" "),v("li",[v("code",[t._v("()")]),t._v("表示一组")])])]),t._v(" "),v("li",[v("p",[t._v("量词")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("+")]),t._v("表示至少一个，相当于"),v("code",[t._v("{1，}")])]),t._v(" "),v("li",[v("code",[t._v("*")]),t._v("表示0或多个，相当于"),v("code",[t._v("{0,}")])]),t._v(" "),v("li",[v("code",[t._v("?")]),t._v("表示0或1，相当于"),v("code",[t._v("{0,1}")])])])]),t._v(" "),v("li",[v("p",[t._v("检查字符串是否以a开头")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var reg = /^a/")])]),t._v(" "),v("li",[v("code",[t._v("^")]),t._v("表示开头，中括号里面表示除了/[^a]/")]),t._v(" "),v("li",[v("code",[t._v("var reg = /a$/")])]),t._v(" "),v("li",[v("code",[t._v("$")]),t._v("表示结尾")]),t._v(" "),v("li",[v("code",[t._v("/^a$/")]),t._v("表示只有a")]),t._v(" "),v("li",[t._v("如果在正则表达式中同时使用^和$符号，则要求字符串必须完全符合正则表达式。")])])]),t._v(" "),v("li",[v("p",[t._v("检查字符串是否是合法手机号")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var reg = /^1[3-9][0-9]{9}$/")])])])]),t._v(" "),v("li",[v("p",[t._v("检查字符串中是否含有.")]),t._v(" "),v("ul",[v("li",[v("code",[t._v(".")]),t._v("有特殊意义，表示任意字符")]),t._v(" "),v("li",[t._v("此时需要使用转义字符，"),v("code",[t._v("\\")]),t._v("，字符串中"),v("code",[t._v("\\")]),t._v("也是表示转义")]),t._v(" "),v("li",[v("code",[t._v("var reg = /\\./")])]),t._v(" "),v("li",[v("code",[t._v("\\.")]),t._v("表示单纯的"),v("code",[t._v(".")])])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\w")]),t._v("任意字母、数字、_  相当于"),v("code",[t._v("[A-z0-9_]")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\W")]),t._v("除了字母、数字、_  相当于"),v("code",[t._v("[^A-z0-9_]")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\d")]),t._v("任意数字，[0-9]")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\D")]),t._v("除了数字，[^0-9]")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\s")]),t._v("空格")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\S")]),t._v("除了空格")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\b")]),t._v("单词边界 "),v("code",[t._v("var reg = /\\bhello\\b/")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("\\B")]),t._v("除了单词边界")])]),t._v(" "),v("li",[v("p",[t._v("去除字符串前后的空格")]),t._v(" "),v("ul",[v("li",[t._v("去除空格就是就是使用"),v("code",[t._v("''")]),t._v("替换空格")]),t._v(" "),v("li",[v("code",[t._v("str.replace(/^\\s*/,\"')")]),t._v("去掉开头的空格")]),t._v(" "),v("li",[v("code",[t._v('str = str.replace(/\\s*$/, "")')]),t._v("去除结尾的空格")]),t._v(" "),v("li",[v("code",[t._v('str = str.replace(/^\\s*|\\s*$/g,"")')]),t._v("去除开头结尾空格")])])]),t._v(" "),v("li",[v("p",[t._v("判断字符串是否为电子邮件")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("var emailReg = /^\\w{3,}(\\.\\w+)*@[A-z0-9]+(\\.[A-z]{2,5}){1,2}$/")])])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);