(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{740:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-数据类型"}},[t._v("#")]),t._v(" js 数据类型")]),t._v(" "),a("p",[t._v("在计算机中，不同的数据所需的存储空间不同，为了充分利用存储空间，就定义了不同的数据类型。js 一共 6 种数据类型（es6 之前），5 种原始数据类型（值类型），1 种引用数据类型（引用类型）。2021 年，已经有 8 种数据类型。")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("String")]),t._v(" 字符串")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Number")]),t._v(" 数值")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Boolean")]),t._v(" 布尔值")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Null")]),t._v(" 空值")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Undefined")]),t._v(" 未定义")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Object")]),t._v(" 对象类型`")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("Symbol")]),t._v(" (ES6) 独一无二的值类型。")])]),t._v(" "),a("li",[a("strong",[a("code",[t._v("BigInt")]),t._v(" (ES10) 大整数基本类型。")])])]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("p",[t._v("js 数字类型既可以用来保存整数值，也可以保存小数（浮点数）。")]),t._v(" "),a("p",[t._v("值在双精度 64 位二进制（-(2^53 -1) 到 2^53 -1）。")]),t._v(" "),a("p",[t._v("几个特殊的数字：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" 正无穷，超过最大值返回\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("Infinity")]),t._v(" 负无穷\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" 非数值，Not"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Number\n    Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" js可表示的最大值\n    Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v(" js可表示的最小正值\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("NaN 与任何值都不相等，包括 NaN 本身，Undefined 和任何数值计算的结果都是 NaN。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("+0 === -0")]),t._v("但是做分母是，返回值不一样")])])]),t._v(" "),a("h3",{attrs:{id:"数字进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字进制"}},[t._v("#")]),t._v(" 数字进制")]),t._v(" "),a("ul",[a("li",[t._v("十进制：没有前导 0 的数值。")]),t._v(" "),a("li",[t._v("八进制：有前缀 0o 或 0O 的数值，或者有前导 0、且只用到 0-7 的八个阿拉伯数字的数值。")]),t._v(" "),a("li",[t._v("十六进制：有前缀 0x 或 0X 的数值。")]),t._v(" "),a("li",[t._v("二进制：有前缀 0b 或 0B 的数值")])]),t._v(" "),a("h3",{attrs:{id:"基本运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本运算"}},[t._v("#")]),t._v(" 基本运算")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("+")]),t._v("只有在两边都是 Number 类型时，才是数字相加，否则就是连字符，用来连接字符串。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("-")]),t._v('时，"2"-1 得到的结果却是数值 1，字符串会自动做隐式转换。')])])]),t._v(" "),a("h3",{attrs:{id:"运算精度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算精度"}},[t._v("#")]),t._v(" 运算精度")]),t._v(" "),a("p",[t._v("JS 中整数运算基本可以保证准确，小数运算很可能得到一个不准确的结果。要进行准确的运算的方法；")]),t._v(" "),a("ul",[a("li",[t._v("简单精度 使用"),a("code",[t._v("toFix()")]),t._v("方法进行小数的截取")]),t._v(" "),a("li",[t._v("实际开发中，可以使用数学运算开源库\n"),a("ul",[a("li",[t._v("Math.js 文件很大，压缩的文件 500kb，涉及大型的复杂运算使用")]),t._v(" "),a("li",[t._v("decimal.js 轻量的运算库，压缩的文件 32kb，大多数数学运算项目都可以满足。")])])])]),t._v(" "),a("p",[t._v("开源库既可以使用 cdn 的方式引用，也可以使用 npm 包的方式引入。")]),t._v(" "),a("h3",{attrs:{id:"数值相关的全局方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值相关的全局方法"}},[t._v("#")]),t._v(" 数值相关的全局方法")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("parseInt()将字符串转换成整数")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("头部空格会自动消除，不是字符串，则会先转为字符串再转换")])]),t._v(" "),a("li",[a("p",[t._v("第一个字符不能转换成数字（除后面直接跟着数字的正负号），返回 NaN。")])]),t._v(" "),a("li",[a("p",[t._v("返回值只有两种可能，十进制整数或者 NaN。")])]),t._v(" "),a("li",[a("p",[t._v("字符串以 0x 或 0X 开头，parseInt 会将其按照十六进制数解析")])]),t._v(" "),a("li",[a("p",[t._v("如果字符串以 0 开头，将其按照 10 进制解析或者 8 进制。")])]),t._v(" "),a("li",[a("p",[t._v("科学计数法不好使，e 会被当成普通字母。")])]),t._v(" "),a("li",[a("p",[t._v("parseInt 方法还可以接受第二个参数（2 到 36 之间，如果第二个参数没有意义则会被忽略），表示被解析的值的进制。默认值是 10。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000000000000000000.5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1e+21"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0000008")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8e-7"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 216")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1000"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("parseFloat()将一个字符串转为浮点数。")]),t._v(" "),a("ul",[a("li",[t._v("科学计数法好使。")]),t._v(" "),a("li",[t._v("空字符串转为 NaN。")])])]),t._v(" "),a("li",[a("p",[t._v("isNaN()方法可以用来判断一个值是否为 NaN。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("只对数值有效，如果传入其他值，会被先转成数值。")])]),t._v(" "),a("li",[a("p",[t._v("isNaN 为 true 的值，有可能不是 NaN，而是一个字符串。")])]),t._v(" "),a("li",[a("p",[t._v("对于对象和数组，isNaN 也返回 true。")])]),t._v(" "),a("li",[a("p",[t._v("但是对于空数组和只有一个数值成员的数组，isNaN 又返回 false。")])]),t._v(" "),a("li",[a("p",[t._v("NaN 是唯一不等于自身的值，这是最可靠的方法。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myIsNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])])]),t._v(" "),a("li",[a("p",[t._v("isFinite()方法返回一个布尔值，表示某个值是否为正常的数值。")]),t._v(" "),a("ul",[a("li",[t._v("Infinity、-Infinity、NaN 和 undefined 这几个值会返回 false")]),t._v(" "),a("li",[a("code",[t._v("isFinite")]),t._v("对于其他的数值都会返回 true。")])])])]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("p",[t._v("字符串使用单引号或者双引号。要点：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("''")]),t._v("引号间什么都不写，称为空字符串。")]),t._v(" "),a("li",[t._v("同类引号不能嵌套。")]),t._v(" "),a("li",[t._v("对于一些特殊的符号，可以使用"),a("code",[t._v("\\")]),t._v("作为转义字符。\n"),a("ul",[a("li",[a("code",[t._v("\\'")]),t._v(" 单引号")]),t._v(" "),a("li",[a("code",[t._v('\\"')]),t._v(" 双引号")]),t._v(" "),a("li",[a("code",[t._v("\\n")]),t._v(" 换行")]),t._v(" "),a("li",[a("code",[t._v("\\r")]),t._v("回车")]),t._v(" "),a("li",[a("code",[t._v("\\b")]),t._v("空格")])])])]),t._v(" "),a("h3",{attrs:{id:"获取字符串的长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取字符串的长度"}},[t._v("#")]),t._v(" 获取字符串的长度")]),t._v(" "),a("p",[t._v("字符串由若干份字符串组成，这些字符的数量就是字符串的长度，可以通过 length 属性获取整个字符串的长度。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello,world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("ul",[a("li",[t._v("一个中文、英文都算一个字符")]),t._v(" "),a("li",[t._v("一个中文标点、英文标点算一个字符")]),t._v(" "),a("li",[t._v("一个空格算一个字符，多个连续空格也算多个字符。")])]),t._v(" "),a("h3",{attrs:{id:"字符串的拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的拼接"}},[t._v("#")]),t._v(" 字符串的拼接")]),t._v(" "),a("p",[t._v("多个字符串之间可以使用加号 "),a("code",[t._v("+")]),t._v(" 进行拼接。")]),t._v(" "),a("p",[a("code",[t._v("字符串 + 任意数据类型 = 拼接之后的新字符串")])]),t._v(" "),a("p",[t._v("拼接前，任意数据类型会强制转换成字符串，然后再拼接成一个新的字符串。应用：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("'' + 任意数据类型")]),t._v(" 可以强制转换成字符串")])]),t._v(" "),a("h3",{attrs:{id:"字符串与数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串与数组"}},[t._v("#")]),t._v(" 字符串与数组")]),t._v(" "),a("ul",[a("li",[t._v("字符串可以视为字符数组，因此可以使用方括号运算符，用来返回某个位置的字符，从 0 开始。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "h"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "e"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "o"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 直接对字符串使用方括号运算符")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "e"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[t._v("如果方括号中的数字超过字符串的长度，或者方括号中根本不是数字，则返回 undefined。")]),t._v(" "),a("li",[t._v("字符串与数组的相似性仅此而已。实际上，无法改变字符串之中的单个字符。")])]),t._v(" "),a("h3",{attrs:{id:"字符串的不可改变性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的不可改变性"}},[t._v("#")]),t._v(" 字符串的不可改变性")]),t._v(" "),a("p",[t._v("字符串里面的值不可被改变，虽然看上去内容变了，其实是地址变了，内存中开辟了新的空间。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("当重新给变量 str 赋值时，常量'hello'不会被修改，依然保存在内存中，str 会改为指向"),a("code",[t._v("world")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"模板字符串-模板字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板字符串-模板字面量"}},[t._v("#")]),t._v(" 模板字符串（模板字面量）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"17"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('",age:"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//传统写法")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("我是")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(",age:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ES6新语法")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("注意：ES6 新语法括号中不是单引号，而是 TAB 键上方的符号。")]),t._v(" "),a("ul",[a("li",[t._v("模板字符串中可以直接换行")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"17"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("我是")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(",\n          age:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ES6新语法")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[t._v("在模板字符串中插入表达式")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("和为")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("，积为")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//ES6新语法")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("模板字符串中可以调用函数")]),t._v(" "),a("li",[t._v("模板字符串支持嵌套使用")])]),t._v(" "),a("h3",{attrs:{id:"字符串的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的方法"}},[t._v("#")]),t._v(" 字符串的方法")]),t._v(" "),a("p",[t._v("在计算机底层，字符串是以字符数组的形式保存的。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("indexOf(想要查询的字符串)")]),t._v("检索字符串中是否含有指定内容，找到返回索引，没有返回-1")]),t._v(" "),a("li",[a("code",[t._v("charAt()")]),t._v("根据索引获取指定索引的字符，直接写"),a("code",[t._v("[]")]),t._v("也可以")]),t._v(" "),a("li",[a("code",[t._v("charCodeAt()")]),t._v("获取索引处的 Unicode 编码")]),t._v(" "),a("li",[a("code",[t._v("String.fromCharCode()")]),t._v("根据 Unicode 编码获取")]),t._v(" "),a("li",[a("code",[t._v("concat")]),t._v("和"),a("code",[t._v("+")]),t._v("一样")]),t._v(" "),a("li",[a("code",[t._v("slice()")]),t._v("可以在字符串中截取指定内容")]),t._v(" "),a("li",[a("code",[t._v("substring()")]),t._v("截取字符串，不同的是这个方法不能接受负值，默认使用 0，会自动交换")]),t._v(" "),a("li",[a("code",[t._v("splice()")]),t._v("删除指定的一个或多个元素")]),t._v(" "),a("li",[a("code",[t._v("split()")]),t._v("可以将字符串拆分成一个数组，传递一个字符串作为参数，根据该字符串拆分数组")]),t._v(" "),a("li",[a("code",[t._v("toUpperCase()")]),t._v("将字符串转换成大写并返回")]),t._v(" "),a("li",[a("code",[t._v("toLowerCase()")]),t._v("将字符串装换成小写并返回")])]),t._v(" "),a("h2",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),a("p",[t._v("布尔值有两个"),a("code",[t._v("true")]),t._v(" 和 "),a("code",[t._v("false")]),t._v("。千万不能加引号，主要用来做逻辑判断：")]),t._v(" "),a("ul",[a("li",[t._v("true 表示真")]),t._v(" "),a("li",[t._v("false 表示假")])]),t._v(" "),a("p",[t._v("布尔型和数字型相加时，")]),t._v(" "),a("ul",[a("li",[t._v("true 按 1 来算")]),t._v(" "),a("li",[t._v("false 按 0 来算")])]),t._v(" "),a("p",[t._v("对于以下几个值转换成布尔值时为 false，其他都是 true。")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("false")]),t._v(" "),a("li",[t._v("0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("\"\"或'' 空字符串")])]),t._v(" "),a("p",[t._v("注意：空数组（[]）和空对象（{}）对应的布尔值，都是 true。")]),t._v(" "),a("h2",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[t._v("#")]),t._v(" null 和 undefined")]),t._v(" "),a("p",[t._v("null 专门用来定义空对象，如果想定义一个变量引用类型，但是暂时还没想好放什么内容，可以设置为 null。")]),t._v(" "),a("ul",[a("li",[t._v("null 类型的值只有一个，就是 null。")]),t._v(" "),a("li",[t._v("使用 typeof 检查一个 null 值时，会返回 object。")])]),t._v(" "),a("p",[t._v("undefined 未定义，使用的情况：")]),t._v(" "),a("ul",[a("li",[t._v("变量已声明，但未赋值，此时该变量的值就是 undefined")]),t._v(" "),a("li",[t._v("变量未声明未定义时，直接使用会报错，使用 typeof 检查则返回 undefined。")]),t._v(" "),a("li",[t._v("如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。在定义一个函数时，如果末尾没有 return 语句，那么其实就是"),a("code",[t._v("return undefined")])]),t._v(" "),a("li",[t._v("调用函数时，如果没有传参，那么这个值就是 undefined。")])]),t._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("null == undefined 为 true")])]),t._v(" "),a("li",[a("p",[t._v("null === undefined 为 false")])]),t._v(" "),a("li",[a("p",[t._v("和数字做运算时：")]),t._v(" "),a("ul",[a("li",[t._v("10 + null 结果时 10")]),t._v(" "),a("li",[t._v("10 + undefined 结果为 NaN")])])]),t._v(" "),a("li",[a("p",[t._v("任何数据类型和 undefined 运算都是 NaN，任何值和 null 运算都相当于和 0 运算。")])])]),t._v(" "),a("p",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("undefined")]),t._v("代表定义了未赋值")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v("代表定义了也赋值了，只是赋的值为 null")])]),t._v(" "),a("p",[t._v("什么时候赋值为 null；")]),t._v(" "),a("ul",[a("li",[t._v("初始赋值为"),a("code",[t._v("null")]),t._v("时，代表将要赋值为对象。\n"),a("ul",[a("li",[a("code",[t._v("var b = null")]),t._v("代表 b 将要赋值为称对象")]),t._v(" "),a("li",[a("code",[t._v("b = [1,2,3]")]),t._v("确定对象并赋值。")])])]),t._v(" "),a("li",[t._v("最后赋值为"),a("code",[t._v("null")]),t._v("，表示释放对象内存。\n"),a("ul",[a("li",[a("code",[t._v("b = null")]),t._v("让 b 指向的对象称为垃圾对象，被垃圾回收器回收。")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);