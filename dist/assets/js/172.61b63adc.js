(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{644:function(t,v,_){"use strict";_.r(v);var i=_(21),s=Object(i.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-的简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的简介"}},[t._v("#")]),t._v(" Git 的简介")]),t._v(" "),_("h2",{attrs:{id:"git-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-是什么"}},[t._v("#")]),t._v(" git 是什么")]),t._v(" "),_("p",[t._v("git 是一个版本控制管理系统（VCS,version control system），可以在任何时间点，将文档的状态记录作为更新记录保存起来，也可以在任何时间点，将更新记录恢复出来。")]),t._v(" "),_("h2",{attrs:{id:"使用-git-的目的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用-git-的目的"}},[t._v("#")]),t._v(" 使用 git 的目的")]),t._v(" "),_("p",[t._v("通过 git 管理托管项目代码。")]),t._v(" "),_("h2",{attrs:{id:"下载和安装-git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#下载和安装-git"}},[t._v("#")]),t._v(" 下载和安装 git")]),t._v(" "),_("p",[t._v("git 官网下载："),_("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/downloads"),_("OutboundLink")],1)]),t._v(" "),_("ul",[_("li",[t._v("安装完后打开 git bash 命令行窗口")]),t._v(" "),_("li",[_("code",[t._v("git --version")]),t._v(" 可以使用这条命令查看当前 git 版本")])]),t._v(" "),_("h2",{attrs:{id:"git-的初始配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的初始配置"}},[t._v("#")]),t._v(" git 的初始配置")]),t._v(" "),_("p",[t._v("git 安装后需要先配置，使用 git 可以多人协作，可以做到责任分工。")]),t._v(" "),_("ol",[_("li",[t._v("初始化用户名\n"),_("code",[t._v("git config --global user.name 'username'")])]),t._v(" "),_("li",[t._v("设置用户名邮箱"),_("br"),t._v(" "),_("code",[t._v("git config --global user.email 'xxx@qq.com'")])]),t._v(" "),_("li",[t._v("查看设置(验证是否初始化成功)"),_("br"),t._v(" "),_("code",[t._v("git config --list")])]),t._v(" "),_("li",[t._v("如果配置需要修改配置信息\n"),_("ul",[_("li",[t._v("再重复上述的命令可以修改配置信息")]),t._v(" "),_("li",[t._v("也可以找到"),_("code",[t._v("C盘-用户文件夹-.gitconfig")]),t._v("中的文件，该文件中修改修改配置信息")])])])]),t._v(" "),_("p",[_("strong",[t._v("注意：此操作只需要执行一次，该设置在 GitHub 仓库主页显示谁提交了该文件。")])]),t._v(" "),_("h2",{attrs:{id:"git-初始化仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-初始化仓库"}},[t._v("#")]),t._v(" git 初始化仓库")]),t._v(" "),_("p",[_("strong",[t._v("前 5 步的作用主要通过命令行创建文件夹和文件，熟悉命令行")]),t._v("，也可以手动创建文件夹")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("显示当前位置"),_("br"),t._v(" "),_("code",[t._v("pwd")])])]),t._v(" "),_("li",[_("p",[t._v("创建名为"),_("code",[t._v("test")]),t._v("的文件夹"),_("br"),t._v(" "),_("code",[t._v("mkdir test")])])]),t._v(" "),_("li",[_("p",[t._v("进入名为"),_("code",[t._v("test")]),t._v("文件夹"),_("br"),t._v(" "),_("code",[t._v("cd test")])])]),t._v(" "),_("li",[_("p",[t._v("返回上一级目录"),_("br"),t._v(" "),_("code",[t._v("cd ..")])])]),t._v(" "),_("li",[_("p",[t._v("创建名为"),_("code",[t._v("index.html")]),t._v("的文件"),_("br"),t._v(" "),_("code",[t._v("touch index.html")])])]),t._v(" "),_("li",[_("p",[t._v("在文件内初始化 Git（创建 Git 仓库）"),_("br"),t._v(" "),_("code",[t._v("git init")]),_("br"),t._v("\n文件夹中会出现一个隐藏文件夹"),_("code",[t._v(".git")]),t._v("，如图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/scripthqs/assets/master/blog/git.png",alt:"git"}})]),t._v(" "),_("ul",[_("li",[t._v("hooks：目录包含客户端或服务端的钩子脚本")]),t._v(" "),_("li",[t._v("info：包含一个全局性排除文件")]),t._v(" "),_("li",[t._v("logs：保存日志信息")]),t._v(" "),_("li",[t._v("objects：目录存储所有数据内容")]),t._v(" "),_("li",[t._v("refs：目录存储指向数据（分支）的提交对象指针")]),t._v(" "),_("li",[t._v("config：文件包含项目特有的配置选项")]),t._v(" "),_("li",[t._v("description：用来显示对仓库的描述信息")]),t._v(" "),_("li",[t._v("HEAD：文件指示目前被检出的分支")]),t._v(" "),_("li",[t._v("index：文件保存暂存区信息")])])])]),t._v(" "),_("h2",{attrs:{id:"git-的工作区域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的工作区域"}},[t._v("#")]),t._v(" git 的工作区域")]),t._v(" "),_("p",[t._v("git 有 3 个工作区域：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("工作区(Working Directory)：添加、编辑、修改文件等动作。")])]),t._v(" "),_("li",[_("p",[t._v("暂存区：暂存已经修改的文件，最后统一提交到 Git 仓库中。")])]),t._v(" "),_("li",[_("p",[t._v("版本库(git Repository)：最终确定的文件保存到仓库，成为一个新的版本，对他人可见。")])])]),t._v(" "),_("h2",{attrs:{id:"git-的基本使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的基本使用"}},[t._v("#")]),t._v(" git 的基本使用")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git init")]),t._v(" 初始化仓库，一个项目只需要做一次")]),t._v(" "),_("li",[_("code",[t._v("git status")]),t._v(" 查看当前状态")]),t._v(" "),_("li",[_("code",[t._v("git add xx")]),t._v(" 将 xx 文件提交到暂存区")]),t._v(" "),_("li",[_("code",[t._v("git add .")]),t._v(" 使用"),_("code",[t._v(".")]),t._v("时，代表将当前文件夹下的所有文件提交到暂存区")]),t._v(" "),_("li",[_("code",[t._v("git commit -m 描述")]),t._v(" 提交到仓库，每次提交一定要写描述")]),t._v(" "),_("li",[_("code",[t._v("git log")]),t._v(" 查看提交状态，每一次提交都会有一个唯一的提交 ID")])]),t._v(" "),_("p",[t._v("git 默认配置忽略了文件的大小写，我选择打开")]),t._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config core.ignorecase\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# true为忽略了大小写，false为不忽略大小写")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config core.ignorecase "),_("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("h2",{attrs:{id:"git-的撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的撤销"}},[t._v("#")]),t._v(" Git 的撤销")]),t._v(" "),_("h3",{attrs:{id:"情况-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#情况-1"}},[t._v("#")]),t._v(" 情况 1")]),t._v(" "),_("p",[t._v("用暂存区的文件覆盖工作目录的文件 ，会改变工作目录的文件")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git checkout 文件")])])]),t._v(" "),_("p",[t._v("此时，工作目录中这个文件就会被暂存区的文件所覆盖，这个操作不会影响暂存区的文件状态")]),t._v(" "),_("h3",{attrs:{id:"情况-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#情况-2"}},[t._v("#")]),t._v(" 情况 2")]),t._v(" "),_("p",[t._v("将文件从暂存区中删除 ，不会更改工作区的文件")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git rm --cached 文件")])])]),t._v(" "),_("p",[t._v("将暂存区的文件从暂存区撤出，不会更改工作区的文件（即： "),_("strong",[t._v("git status")]),t._v(" 提示的被修改且被加入暂存区的内容，会被撤销，工作区文件不会变）")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git restore --staged 文件")])])]),t._v(" "),_("p",[t._v("注意：这两条命令产生的结果一样，可以替换使用")]),t._v(" "),_("h3",{attrs:{id:"情况-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#情况-3"}},[t._v("#")]),t._v(" 情况 3")]),t._v(" "),_("p",[t._v("将不在暂存区的文件撤销更改 （即： "),_("strong",[t._v("git status")]),t._v(" 提示的被修改 但未被加入暂存区的内容，会被撤销）")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git restore 文件")])])]),t._v(" "),_("h3",{attrs:{id:"情况-4"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#情况-4"}},[t._v("#")]),t._v(" 情况 4")]),t._v(" "),_("p",[t._v("将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git log")]),t._v(" 查看之前提交版本的 commitID")]),t._v(" "),_("li",[_("code",[t._v("git reset --hard commitID")])])]),t._v(" "),_("p",[t._v("此时，就知道当初提交描述的重要性")])])}),[],!1,null,null,null);v.default=s.exports}}]);