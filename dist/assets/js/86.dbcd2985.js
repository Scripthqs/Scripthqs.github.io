(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{544:function(t,s,a){"use strict";a.r(s);var e=a(21),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"计算属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性"}},[t._v("#")]),t._v(" 计算属性")]),t._v(" "),a("h2",{attrs:{id:"_1-计算属性简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算属性简介"}},[t._v("#")]),t._v(" 1 计算属性简介")]),t._v(" "),a("p",[t._v("计算属性指的是通过"),a("strong",[t._v("一系列运算")]),t._v("之后，最终得到"),a("strong",[t._v("一个属性值")]),t._v("。")]),t._v(" "),a("p",[t._v("这个"),a("strong",[t._v("动态计算出来的属性值")]),t._v("可以被模板结构或 methods 方法使用。")]),t._v(" "),a("h2",{attrs:{id:"_2-计算属性的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算属性的使用"}},[t._v("#")]),t._v(" 2 计算属性的使用")]),t._v(" "),a("p",[t._v("定义一个函数，return函数的返回值。")]),t._v(" "),a("ul",[a("li",[t._v("字符串拼接")]),t._v(" "),a("li",[t._v("返回函数的计算结果，计算属性的函数写在computed中")]),t._v(" "),a("li",[t._v("使用"),a("strong",[t._v("计算属性时是属性名")]),t._v("，而不是调用函数的形式")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("computed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"_3-计算属性的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算属性的特点"}},[t._v("#")]),t._v(" 3 计算属性的特点")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ol",[a("li",[t._v("定义的时候，要被定义为“方法”")]),t._v(" "),a("li",[t._v("在使用计算属性的时候，当普通的属性使用即可")])]),t._v(" "),a("p",[t._v("好处：")]),t._v(" "),a("ol",[a("li",[t._v("实现了代码的复用")]),t._v(" "),a("li",[t._v("只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值！")])]),t._v(" "),a("h2",{attrs:{id:"_4-计算属性的setter和getter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-计算属性的setter和getter"}},[t._v("#")]),t._v(" 4 计算属性的setter和getter")]),t._v(" "),a("p",[t._v("计算属性原理是底层借助了"),a("strong",[t._v("Object.defineProperty的setter和getter")]),t._v("来的")]),t._v(" "),a("p",[a("code",[t._v("computed")]),t._v("计算属性中，一般是一个对象，里面有两个方法：getter和setter，但是计算属性默认只用 getter，所以一般都是简写的，所有调用都不加括号")]),t._v(" "),a("h2",{attrs:{id:"_5-计算属性的缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-计算属性的缓存"}},[t._v("#")]),t._v(" 5 计算属性的缓存")]),t._v(" "),a("p",[t._v("计算属性虽然和定义方法得到的最终结果是一样的，但是计算属性是基于它们的"),a("strong",[t._v("响应式依赖")]),t._v("进行缓存的。所以多使用计算属性少使用方法。")])])}),[],!1,null,null,null);s.default=r.exports}}]);