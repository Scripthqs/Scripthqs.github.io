(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{513:function(t,e,s){"use strict";s.r(e);var r=s(50),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"计算属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算属性"}},[t._v("#")]),t._v(" 计算属性")]),t._v(" "),s("h2",{attrs:{id:"_1-计算属性简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算属性简介"}},[t._v("#")]),t._v(" 1 计算属性简介")]),t._v(" "),s("p",[t._v("计算属性指的是通过"),s("strong",[t._v("一系列运算")]),t._v("之后，最终得到"),s("strong",[t._v("一个属性值")]),t._v("。")]),t._v(" "),s("p",[t._v("这个"),s("strong",[t._v("动态计算出来的属性值")]),t._v("可以被模板结构或 methods 方法使用。")]),t._v(" "),s("h2",{attrs:{id:"_2-计算属性的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算属性的使用"}},[t._v("#")]),t._v(" 2 计算属性的使用")]),t._v(" "),s("p",[t._v("定义一个函数，return函数的返回值。")]),t._v(" "),s("ul",[s("li",[t._v("字符串拼接")]),t._v(" "),s("li",[t._v("返回函数的计算结果，计算属性的函数写在computed中")]),t._v(" "),s("li",[t._v("使用"),s("strong",[t._v("计算属性时是属性名")]),t._v("，而不是调用函数的形式")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("computed:{\n    add(){\n    \treturn this.a + ' ' + this.b\n    }\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"_3-计算属性的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-计算属性的特点"}},[t._v("#")]),t._v(" 3 计算属性的特点")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ol",[s("li",[t._v("定义的时候，要被定义为“方法”")]),t._v(" "),s("li",[t._v("在使用计算属性的时候，当普通的属性使用即可")])]),t._v(" "),s("p",[t._v("好处：")]),t._v(" "),s("ol",[s("li",[t._v("实现了代码的复用")]),t._v(" "),s("li",[t._v("只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值！")])]),t._v(" "),s("h2",{attrs:{id:"_4-计算属性的setter和getter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-计算属性的setter和getter"}},[t._v("#")]),t._v(" 4 计算属性的setter和getter")]),t._v(" "),s("p",[t._v("计算属性原理是底层借助了"),s("strong",[t._v("Object.defineProperty的setter和getter")]),t._v("来的")]),t._v(" "),s("p",[s("code",[t._v("computed")]),t._v("计算属性中，一般是一个对象，里面有两个方法：getter和seter，但是计算属性默认只用 getter，所以一般都是简写的，所有调用都不加括号")]),t._v(" "),s("h2",{attrs:{id:"_5-计算属性的缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-计算属性的缓存"}},[t._v("#")]),t._v(" 5 计算属性的缓存")]),t._v(" "),s("p",[t._v("计算属性虽然和定义方法得到的最终结果是一样的，但是计算属性是基于它们的"),s("strong",[t._v("响应式依赖")]),t._v("进行缓存的。所以多使用计算属性少使用方法。")])])}),[],!1,null,null,null);e.default=a.exports}}]);