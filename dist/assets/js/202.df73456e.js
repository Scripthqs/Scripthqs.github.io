(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{655:function(t,_,v){"use strict";v.r(_);var s=v(50),a=Object(s.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"let和const"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#let和const"}},[t._v("#")]),t._v(" Let和const")]),t._v(" "),v("p",[t._v("var的设计可以看作成JavaScript语言设计的缺陷。使用let替代var可以解决没有块级作用域的问题。")]),t._v(" "),v("h2",{attrs:{id:"_1-块级作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-块级作用域"}},[t._v("#")]),t._v(" 1. 块级作用域")]),t._v(" "),v("p",[t._v("块级作用域"),v("code",[t._v("{}")]),t._v("里面声明的变量不会被外面访问。在ES5之前，if和for都没有块级作用域，必须借助函数作用域。")]),t._v(" "),v("h2",{attrs:{id:"_2-let声明变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-let声明变量"}},[t._v("#")]),t._v(" 2. let声明变量")]),t._v(" "),v("ol",[v("li",[t._v("let变量不能重复声明")]),t._v(" "),v("li",[t._v("有块级作用域")]),t._v(" "),v("li",[t._v("不存在变量提升")]),t._v(" "),v("li",[t._v("不影响作用域链")]),t._v(" "),v("li",[t._v("声明的变量不再是window的属性")])]),t._v(" "),v("p",[v("strong",[t._v("应用场景：以后声明变量使用 let 就对了")])]),t._v(" "),v("h2",{attrs:{id:"_3-const声明常量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-const声明常量"}},[t._v("#")]),t._v(" 3. const声明常量")]),t._v(" "),v("ol",[v("li",[t._v("一定要赋初值")]),t._v(" "),v("li",[t._v("常量的值不能修改")]),t._v(" "),v("li",[t._v("一般常量使用大写")]),t._v(" "),v("li",[t._v("有块级作用域")]),t._v(" "),v("li",[t._v("声明的变量不再是window的属性")])]),t._v(" "),v("p",[t._v("对于数组和对象中的元素修改，不算对常量的修改，不会报错，使用const声明数组和对象比较稳妥，考虑优先使用")]),t._v(" "),v("p",[v("strong",[t._v("注意: 对象属性修改和数组元素变化不会出发 const 错误")])]),t._v(" "),v("p",[v("strong",[t._v("应用场景：声明对象类型使用 const，非对象类型声明选择 let")])])])}),[],!1,null,null,null);_.default=a.exports}}]);