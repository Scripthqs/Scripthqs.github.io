(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{742:function(t,S,e){"use strict";e.r(S);var r=e(21),i=Object(r.a)({},(function(){var t=this,S=t.$createElement,e=t._self._c||S;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"typescript-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#typescript-简介"}},[t._v("#")]),t._v(" TypeScript 简介")]),t._v(" "),e("ol",[e("li",[t._v("TypeScript 是 JavaScript 的超集。")]),t._v(" "),e("li",[t._v("它对 JS 进行了扩展，向 JS 中引入了类型的概念，并添加了许多新的特性。")]),t._v(" "),e("li",[t._v("TS 代码需要通过编译器编译为 JS，然后再交由 JS 解析器执行。")]),t._v(" "),e("li",[t._v("TS 完全兼容 JS，换言之，任何的 TS 代码都可以直接当成 JS 使用。")]),t._v(" "),e("li",[t._v("相较于 JS 而言，TS 拥有了静态类型，更加严格的语法，更强大的功能；TS 可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS 代码可以编译为任意版本的 JS 代码，可有效解决不同 JS 运行环境的兼容问题；同样的功能，TS 的代码量要大于 JS，但由于 TS 的代码结构更加清晰，变量类型更加明确，在后期代码的维护中 TS 却远远胜于 JS。")])])])}),[],!1,null,null,null);S.default=i.exports}}]);