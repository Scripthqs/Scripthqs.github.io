import{_ as s,o as n,c as a,f as e}from"./app-75be3b02.js";const t="/assets/router-a41612ba.png",p={},o=e('<h1 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h1><h2 id="路由简介" tabindex="-1"><a class="header-anchor" href="#路由简介" aria-hidden="true">#</a> 路由简介</h2><p>路由在生活中如拨打服务电话时，按数字几能处理什么样的处理，它就是类似于按键与服务之间的<strong>映射</strong>关系。在 Express 中，<strong>路由指的就是客户端发起的请求与服务器端处理方法之间的映射关系</strong>。映射就是一一对应的关系。</p><p><img src="'+t+`" alt="路由"></p><h2 id="定义路由" tabindex="-1"><a class="header-anchor" href="#定义路由" aria-hidden="true">#</a> 定义路由</h2><p>express 中的路由分 3 部份组成，分别是请求<strong>类型（方法）、请求 uri（地址）和对应的处理函数</strong>。</p><p>当一个客户端请求到达服务端之后，先经过路由规则匹配，只有匹配成功之后，才会调用对应的处理函数。在匹配时，会<strong>按照路由的顺序进行匹配</strong>，如果<strong>请求类型和请求的 URL 同时匹配成功</strong>，则 Express 会将这次请求，转交给对应的函数进行处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token operator">&lt;</span>get<span class="token operator">/</span>post<span class="token operator">/</span>put<span class="token operator">/</span><span class="token keyword">delete</span><span class="token operator">/</span>use<span class="token operator">&gt;</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// use方法并不是请求类型方法，但是它放的位置与请求方法一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="路由模块化-重点" tabindex="-1"><a class="header-anchor" href="#路由模块化-重点" aria-hidden="true">#</a> 路由模块化（重点）</h2><p>含义：将原本可能写在一个文件中的路由规则，<strong>拆分</strong>成若干个路由文件（js 文件，一个 js 文件就是一个模块）。</p><p>顾名思义，将路由进行模块化，<strong>以模块（js 文件）为单位进行管理，物以类聚</strong>。</p><p>核心思想：能拆就拆（拆到不能拆为止，解耦，高内聚，低耦合）。</p><p>在开发项目时，如果将所有的路由规则都挂载到入口文件中，程序编写和维护都变得更加困难。所以 express 为了路由的模块化管理功能，通过 express.Router()方法创建路由模块化处理程序，可以将不同业务需求分开到不同的模块中，从而便于代码的维护和项目扩展。</p><p>路由模块化处理可以分为以下步骤来完成</p><ul><li>创建独立 js 空白文件（最后是统一放在一个目录下） <ul><li>该文件即路由<code>模块化</code>文件</li></ul></li><li>在第一步 js 文件中使用<code>express.Router()</code>方法创建路由模块对象</li><li>使用路由对象完成路由规则的对应的业务编写</li><li>使用模块化导出（<code>module.exports = router</code>）</li><li>在主入口文件中能够使用 app.use 方法来注册定义的路由模块 <ul><li>支持前缀的使用</li><li>app.use(&quot;前缀&quot;,路由模块化路由)</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.创建出空白的js文件，引入express</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//2.在第一步js文件中使用express.Router()方法创建路由模块对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//3.使用路由对象完成路由规则的对应的业务编写</span>
<span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token comment">//4.使用模块化导出</span>
module<span class="token punctuation">.</span>exports<span class="token operator">=</span> router
<span class="token comment">//5.在主入口文件中能够使用app.use方法来注册定义的路由模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),r=[o];function c(i,l){return n(),a("div",null,r)}const d=s(p,[["render",c],["__file","04_express_router.html.vue"]]);export{d as default};
