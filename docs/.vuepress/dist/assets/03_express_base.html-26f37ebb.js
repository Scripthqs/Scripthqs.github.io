import{_ as s,o as n,c as a,f as p}from"./app-c52c506a.js";const t={},e=p(`<h1 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h1><h2 id="获取-query-字符串" tabindex="-1"><a class="header-anchor" href="#获取-query-字符串" aria-hidden="true">#</a> 获取 query 字符串</h2><p>获取 get 传值的参数。</p><p>通过 req.query 对象，可以访问到客户端通过查询字符串的形式发送到服务器的参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取到的直接就是个对象</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态参数传递" tabindex="-1"><a class="header-anchor" href="#动态参数传递" aria-hidden="true">#</a> 动态参数传递</h2><p>Express 也支持类似于 Vue 中<code>动态路由</code>的形式传递参数，传递的参数通过 req.params 对象可以访问到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 必须的路由参数（不传就匹配不上，返回404错误）</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/:id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 可选的路由参数（传递与否都不会报错）</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/:id?&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个传参方式是符合 restful 传参规范的。</p></blockquote><h2 id="静态资源托管" tabindex="-1"><a class="header-anchor" href="#静态资源托管" aria-hidden="true">#</a> 静态资源托管</h2><p>express 提供了一个非常好用的方法，叫做 <code>express.static()</code>，通过此方法，可以非常方便地创建一个静态 web 资源服务器：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// app.use()表示使用（中间件）</span>
<span class="token comment">// 现在可以访问public目录下所有的文件</span>
<span class="token comment">// 如public/aa.jpg文件，则可以通过 : http://xxxx/images/aa.jpg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>express 还支持给静态资源文件创建一个<strong>虚拟的</strong>文件前缀（实际上文件系统中并不存在），可以使用 <code>express.static</code> 函数指定一个虚拟的静态目录，就像下面这样：</p><blockquote><p>前缀的使用意义：</p><ul><li>可以迷惑别人，一定程度上阻止别人猜测我们服务器的目录结构</li><li>可以帮助我们更好的组织和管理静态资源</li></ul></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/static&quot;</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">&quot;public&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>前缀前面的“/”必须要加，否则就错。</p></blockquote><p>现在你可以使用 <code>/static</code> 作为前缀来加载 <code>public</code> 文件夹下的文件了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>images<span class="token operator">/</span>kitten<span class="token punctuation">.</span>jpg
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>css<span class="token operator">/</span>style<span class="token punctuation">.</span>css
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>js<span class="token operator">/</span>app<span class="token punctuation">.</span>js
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>images<span class="token operator">/</span>bg<span class="token punctuation">.</span>png
<span class="token literal-property property">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3000</span><span class="token operator">/</span><span class="token keyword">static</span><span class="token operator">/</span>hello<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用 app.use()方法<strong>一般</strong>写在具体的路由监听之前。</p></blockquote>`,19),o=[e];function c(l,i){return n(),a("div",null,o)}const u=s(t,[["render",c],["__file","03_express_base.html.vue"]]);export{u as default};
